dgm v2.x.x
 * `dgm::Animation` is initialized with a random state when constructed with animation states
	* This way the program doesn't immediately throw an exception when programmer forgets to set some state
 * `UniversalReference` trait can handle implicit conversions
 * Adding bunch of math functions
	* `getClosestPointOnLine` - useful for finding out distance of a point from a line
	* `getIntersection(line, line)` - for finding intersection of two lines
	* `getIntersection(line, circle)` - for finding intersections between a line and a circle
	* `hasIntersection(line, circle)` - faster check whether line intersects a circle

dgm-lib v2.1.0
 * `dgm::Buffer` has been revamped even further
	* Renamed to `dgm::StaticBuffer`
	* Capacity is now specified in constructor and it cannot be resized
	* Methods were renamed to make sense and not to blindly follow `std`
		* `grow` instead of `expand`
		* `growUnchecked` that grows the container and always result of `getLast`
			* If the buffer is full, it always returns last element
		* `getSize`, `getCapacity`, `getLast`, `isEmpty`, `isFull` instead of `size`, `capacity`, `last`, `empty` and `full`
	* Added trait called `StaticBufferType`
 * Added class `dgm::DynamicBuffer`
	* Has constant time insertion and deletion and stable iterators
	* Doesn't have upper cap on the item count
	* Used by `dgm::SpatialBuffer`, for custom use case prefer using `plf::colony`
 * Added class `dgm::SpatialBuffer`
	* Can perform fast lookups for items based on their position (something like QuadTree, but simpler)
	* Has somewhat constant time insertion and deletion
		* Spatially huge items will take longer than tiny ones
 * `dgm::ps::ParticleSystemInterface` has been revamped
	* `init` method was removed and logic moved to constructor
	* `createParticle` is no longer virtual, instead it wraps call to virtual `createParticleImpl`
 * `dgm::ps::ParticleSystemRenderer`
	* `init` method was removed and logic moved to constructor
	* Texture pointer has been changed to be constant, so it can work with revamped `dgm::ResourceManager`
 * Traits
	* Renamed `IsSmartPtr` to `SmartPtrType`
	* Renamed `IsSfVector` to `SfmlVectorType`
	* Added concept for `TrivialType`, used by `dgm::StaticBuffer` type

dgm-lib v2.0.0
 * Major changes:
	 * SFML 2.6.0 is now used
	 * C++23 is required
		* [Deducing this](https://devblogs.microsoft.com/cppblog/cpp23-deducing-this/) is used by `dgm::Buffer`
		* `std::stacktrace` is used by `dgm::GeneralException`
	 * CMakeLists.txt has been revamped:
		* Dependencies are managed with CMake Package Manager
		* Can be used as a subproject of another project which correctly handles linkage of all dependencies
	 * Error handling has been revamped:
		* `dgm::GeneralException` renamed to `dgm::Exception`
		* Stacktrace is appended to error message in `dgm::Exception`
		* `dgm::ResourceException`, `dgm::EnvironmentException` and `dgm::ShellExceptions` were removed, because they were not used
		* Added type `dgm::ErrorMessage` which is an alias for returning `std::string` error messages wrapped in `std::expected`
	 * Changed `dgm::LoaderInterface` to require `std::filesystem::path` instead of `std::string`
	 * `dgm::Buffer` has been revamped:
		* It no longer guarantees stability of iterators, instead it is faster
		* Template type is now required to be default-constructible and swappable via concepts
		* The class is fully `constexpr` and mostly `noexcept`
	 * `dgm::ResourceManager` has been revamped:
		* It can be used to store almost any kind of resource by providing user callbacks that handle the loading. Only requirement is that the resource needs to be default-constructible.
		* It is completely `noexcept` and `[[nodiscard]]`
		* It properly invokes destructors
		* It no longer depends on `dgm::LoaderInterface` as loading itself is handled by the callbacks
		* It can list all resource ids tied to particular type
		* It no longer prevents two resources of distinct types not be able to have the same ID
 * Minor changes:
	 * Documentation changes:
		* Added documentation for `dgm::JsonLoader`
		* Added documentation on CMake integration
	 * Warning about name shadowing has been turned into error
	 * Many functions have been marked `explicit`, `[[nodiscard]]`, `constexpr`, or `noexcept`
	 * Math constants have been removed, they are superseded by `std::numbers` from `<numbers>`

dgm-lib v1.10.0
 * `dgm::ResourceManager` can now load `dgm::Clip` from JSON files
 * `dgm:Clip` no longer has to be moved into `dgm::TileMap`
 * `dgm::Camera` no longer maintains a reference to `sf::View` and instead provides API `getCurrentView()` and `getDefaultView()`
	* This prevents an issue where View could be passed down to Camera before being properly initialize and zooming would then be broken
	* It also prevents possible memory leak where the View would be destroyed before Camera

dgm-lib v1.9.0
 * `dgm::Animation` no longer depends on `sf::Sprite`
	* Use `dgm::Animation::getCurrentFrame()` instead
 * Bumped nlohmann json to v3.11.2
	* This resolves a warning about `<ciso646>` being removed in C++20

dgm-lib v1.8.2
 * Added basic collision detection between VisionCone and Point
 * Fixed dgm::Controller::getValue returning 1.f when mouse button wasn't bound to given input code
	* NOTE: sf::Mouse::isButtonPressed(sf::Mouse::ButtonCount) can return true for whatever reason
 * Fixed dgm::Controller::getValue returning 1.f when keyboard key wasn't bound to given input code
	* NOTE: sf::Keybard::isKeyPressed(sf::Keyboard::Unknown) can return true for whatever reason
 * Fixed missing virtual destructor on dgm::AbstractController

dgm-lib v1.8.1
 * Removed dshlibs includes from final package

dgm-lib v1.8.0
 * Removed dsh::Config dependency in dgm::Window
	* Replaced with dgm::WindowSettings
 * Removed dsh::LevelD dependency in dgm::Mesh, dgm::TileSet and dgm::Path
	* This only affected overloaded convenience constructors

dgm-lib v1.7.0
 * **IMPORTANT:** dgm-lib is now compiled with VS22 (version 17.x), toolset v143. Release artifact naming had changed to reflect this.
 * Added dgm::VisionCone object along with collision detection method between cones and circles
	* Supposed to be used for AI vision
 * dgm::AnimationStates now work by their own instead of std::shared_ptr. dgm::ResourceManager returns references to them and dgm::Animation accepts a const reference to use them so it is still possible to reuse the same AnimationStates object between multiple Animation objects without ever making unneeded copies.
 * Fixed dgm::Controller::bindInput throwing assert then trying to bind distinct inputs
 * Fixed missing virtual destructors on interface classes
	* Compiler now issues an error when that happens
 * Fixed missing includes to LoaderInterface and JsonLoader in dgm.hpp
 * Fixed dgm::Animation crashing when default constructor was invoked
 * Fixed bug in dgm::NavMesh where getPath crashed after few queries because its internal structures got into inconsistent state
 * Removed noexcept requirement on dgm::Clip::getFrame so out-of-bounds indices are checked
 * Removed RingBuffer and Shell modules as they were not used/finished anyway
 * Removed dsh::Strings dependency as it was not used anymore

dgm-lib v1.6.1
 * Removed dgm::Animation constructor which accepts path to configuration file (use dgm::JsonLoader instead)

dgm-lib v1.6.0
 * Added Math::radialDifference for computing difference between angles
 * dgm::Clip and dgm::AnimationStates can be now loaded from JSON via dgm::JsonLoader
	* JSON syntax has been changed to be more readable
 * dgm::ResourceManager now requires dgm::LoaderInterface implementation (dgm::JsonLoader or your custom one) to be able to load dgm::AnimationStates
 * dgm::ResourceManager no longer has pedantic mode, instead you need to specify which extensions will be used for resource loading when loading directory

dgm-lib v1.5.2
 * Added empty constructor and move assigment operator for dgm::Path
 * Fixed edge case where path could be found even though it ended in solid wall

dgm-lib v1.5.0
 * Added dgm::Path, dgm::TileNavMesh and dgm::WorldNavMesh classes for pathfinding purposes
 * Added type trait for sf::Vector
 * Added dgm::Utility::less function for sf::Vector (usable for std::map template)

dgm-lib v1.4.4
 * Added Traits.hpp header with concepts for detection smart pointers
 * Added Utility.hpp header with to_string method for serializing Vectors
 * Added optimizations for smart pointers to dgm::Buffer
	* When template argument is unique_ptr, shared_ptr or weak_ptr, the underlying storage will skip one level of pointers
 * Removed dgm::Math::lerp as std::lerp is available in <algorithm>
 * Fixed broken static_asserts in Controller.cpp

dgm-lib v1.3.4
 * Fixed linkage of xinput.lib
 * Fixed bug where LStickXneg binding did not invert button values in getValue function
 * Inverted return value of dgm::Controller::getValue for Y axis of both sticks to conform to SFML's coordinate system
 * Google Benchmark is no longer bundled with release

dgm-lib v1.3.0
 * Changed dgm::Animation::bindSprite to accept a reference
 * Reimplemented dgm::AbstractController and dgm::Controller
	* Xbox 360, Xbox One and Xbox Series controllers are now supported, including vibrations

dgm-lib v1.2.7
 * Changed dgm::Animation::setSpeed/getSpeed to work with unsigned numbers
 * Updated dgm::Buffer interface with nodiscard, const and noexcept specifiers
 * Fixed a bug where resizing dgm::Buffer after initialization would not update capacity value
 * Added setRotation/getRotation/rotateBy methods to dgm::ps::Particle
 * Optimized all of dgm::Collision::basic code for speed
 * PDB file is now packaged alongside library
 * Internal:
	* Integrated with Google Benchmark
	* Added sandbox project for visual testing

dgm-lib v1.1.1
 * Added dgm::ps::Particle::despawn method
 * Allow poping of arbitrary number of states per frame

dgm-lib v1.1.0
 * Fix edge case in dgm::Clip when boundaries were the same as frame size and frame offset was nonzero
 * Added dgm::AppState::restoreFocus
 * Bump to dsh 1.7.0 with LevelD::Path support
 * Reworked dgm::AppState::draw logic
	* Added dgm::AppState::getClearColor
 * Fixed broken assert in TileMap.cpp

dgm-lib v1.0.0
 * Extracted library from DGM repo
 * Added unit tests
 * Reworked memory allocation for dgm::App
 * Added transparent AppStates
 * Reworked particle system implementation
 * Behavioral bugfixes to dgm::Clip
 * Interface keyword refactors