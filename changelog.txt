dgm-lib v1.x.x
 * Fixed missing virtual destructors on interface classes
	* Compiler now issues an error when that happens
 * Fixed missing includes to LoaderInterface and JsonLoader in dgm.hpp
 * Fixed dgm::Animation crashing when default constructor was invoked
 * Fixed bug in dgm::NavMesh where getPath crashed after few queries because its internal structures got into inconsistent state
 * Removed noexcept requirement on dgm::Clip::getFrame so out-of-bounds indices are checked
 * Removed RingBuffer and Shell modules as they were not used/finished anyway
 * Removed dsh::Strings dependency as it was not used anymore

dgm-lib v1.6.1
 * Removed dgm::Animation constructor which accepts path to configuration file (use dgm::JsonLoader instead)

dgm-lib v1.6.0
 * Added Math::radialDifference for computing difference between angles
 * dgm::Clip and dgm::AnimationStates can be now loaded from JSON via dgm::JsonLoader
	* JSON syntax has been changed to be more readable
 * dgm::ResourceManager now requires dgm::LoaderInterface implementation (dgm::JsonLoader or your custom one) to be able to load dgm::AnimationStates
 * dgm::ResourceManager no longer has pedantic mode, instead you need to specify which extensions will be used for resource loading when loading directory

dgm-lib v1.5.2
 * Added empty constructor and move assigment operator for dgm::Path
 * Fixed edge case where path could be found even though it ended in solid wall

dgm-lib v1.5.0
 * Added dgm::Path, dgm::TileNavMesh and dgm::WorldNavMesh classes for pathfinding purposes
 * Added type trait for sf::Vector
 * Added dgm::Utility::less function for sf::Vector (usable for std::map template)

dgm-lib v1.4.4
 * Added Traits.hpp header with concepts for detection smart pointers
 * Added Utility.hpp header with to_string method for serializing Vectors
 * Added optimizations for smart pointers to dgm::Buffer
	* When template argument is unique_ptr, shared_ptr or weak_ptr, the underlying storage will skip one level of pointers
 * Removed dgm::Math::lerp as std::lerp is available in <algorithm>
 * Fixed broken static_asserts in Controller.cpp

dgm-lib v1.3.4
 * Fixed linkage of xinput.lib
 * Fixed bug where LStickXneg binding did not invert button values in getValue function
 * Inverted return value of dgm::Controller::getValue for Y axis of both sticks to conform to SFML's coordinate system
 * Google Benchmark is no longer bundled with release

dgm-lib v1.3.0
 * Changed dgm::Animation::bindSprite to accept a reference
 * Reimplemented dgm::AbstractController and dgm::Controller
	* Xbox 360, Xbox One and Xbox Series controllers are now supported, including vibrations

dgm-lib v1.2.7
 * Changed dgm::Animation::setSpeed/getSpeed to work with unsigned numbers
 * Updated dgm::Buffer interface with nodiscard, const and noexcept specifiers
 * Fixed a bug where resizing dgm::Buffer after initialization would not update capacity value
 * Added setRotation/getRotation/rotateBy methods to dgm::ps::Particle
 * Optimized all of dgm::Collision::basic code for speed
 * PDB file is now packaged alongside library
 * Internal:
	* Integrated with Google Benchmark
	* Added sandbox project for visual testing

dgm-lib v1.1.1
 * Added dgm::ps::Particle::despawn method
 * Allow poping of arbitrary number of states per frame

dgm-lib v1.1.0
 * Fix edge case in dgm::Clip when boundaries were the same as frame size and frame offset was nonzero
 * Added dgm::AppState::restoreFocus
 * Bump to dsh 1.7.0 with LevelD::Path support
 * Reworked dgm::AppState::draw logic
	* Added dgm::AppState::getClearColor
 * Fixed broken assert in TileMap.cpp

dgm-lib v1.0.0
 * Extracted library from DGM repo
 * Added unit tests
 * Reworked memory allocation for dgm::App
 * Added transparent AppStates
 * Reworked particle system implementation
 * Behavioral bugfixes to dgm::Clip
 * Interface keyword refactors